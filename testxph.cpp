#include <stdint.h>
#include <stdio.h>
#include "lzxxpr_convert.h"
#include "stringutils.h"
// g++ -m32 testxph.cpp dllloader.cpp  -I ../../itsutils/common/ ../../itsutils/common/stringutils.cpp 
// min size: 0x105
uint8_t test[]= {0x42,0x4d,0x86,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x01,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x28,0x0f,0x00,0x00,0xae,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x00,0xc0,0xc0,0xc0,0x00,0xff,0xff,0xff,0x00,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x2a,0xa8,0xaa,0xaa,0x0a,0xa0,0xaa,0xaa,0x82,0x82,0xaa,0xaa,0xa0,0x0a,0xaa,0xaa,0xa8,0x2a,0xaa,0xaa,0xa0,0x0a,0xaa,0xaa,0x82,0x82,0xaa,0xaa,0x0a,0xa0,0xaa,0xaa,0x2a,0xa8,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa, 0x42,0x4d,0x86,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x01,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x28,0x0f,0x00,0x00,0xae,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x00,0xc0,0xc0,0xc0,0x00,0xff,0xff,0xff,0x00,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x2a,0xa8,0xaa,0xaa,0x0a,0xa0,0xaa,0xaa,0x82,0x82,0xaa,0xaa,0xa0,0x0a,0xaa,0xaa,0xa8,0x2a,0xaa,0xaa,0xa0,0x0a,0xaa,0xaa,0x82,0x82,0xaa,0xaa,0x0a,0xa0,0xaa,0xaa,0x2a,0xa8,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa, 0x42,0x4d,0x86,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x01,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x28,0x0f,0x00,0x00,0xae,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x00,0xc0,0xc0,0xc0,0x00,0xff,0xff,0xff,0x00,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x2a,0xa8,0xaa,0xaa,0x0a,0xa0,0xaa,0xaa,0x82,0x82,0xaa,0xaa,0xa0,0x0a,0xaa,0xaa,0xa8,0x2a,0xaa,0xaa,0xa0,0x0a,0xaa,0xaa,0x82,0x82,0xaa,0xaa,0x0a,0xa0,0xaa,0xaa,0x2a,0xa8,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa, 0x42,0x4d,0x86,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x01,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x28,0x0f,0x00,0x00,0xae,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x00,0xc0,0xc0,0xc0,0x00,0xff,0xff,0xff,0x00,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x2a,0xa8,0xaa,0xaa,0x0a,0xa0,0xaa,0xaa,0x82,0x82,0xaa,0xaa,0xa0,0x0a,0xaa,0xaa,0xa8,0x2a,0xaa,0xaa,0xa0,0x0a,0xaa,0xaa,0x82,0x82,0xaa,0xaa,0x0a,0xa0,0xaa,0xaa,0x2a,0xa8,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa};
int main(int,char**)
{
    lzxxpr_convert _lzxxpr;

    {
    uint8_t comp[1024];
    size_t n= _lzxxpr.DoCompressConvert(ITSCOMP_XPH_ENCODE, comp, sizeof(comp), test, sizeof(test));
    if (n!=size_t(-1)) {
        printf("->%d : %s\n", n, hexdump(comp, n).c_str());
        uint8_t full[1024];
        size_t m= _lzxxpr.DoCompressConvert(ITSCOMP_XPH_DECODE, full, sizeof(full), comp, n);
        if (m!=size_t(-1)) {
            printf("->%d : %s\n", m, hexdump(full, m).c_str());
        }
    }
    }
    {
    uint8_t comp[1024];
    size_t n= _lzxxpr.DoCompressConvert(ITSCOMP_XPH_DECODE, comp, sizeof(comp), test, sizeof(test));
    if (n!=size_t(-1)) {
        printf("->%d : %s\n", n, hexdump(comp, n).c_str());
        uint8_t full[1024];
        size_t m= _lzxxpr.DoCompressConvert(ITSCOMP_XPH_ENCODE, full, sizeof(full), comp, n);
        if (m!=size_t(-1)) {
            printf("->%d : %s\n", m, hexdump(full, m).c_str());
        }
    }
    }


    return 0;
}
